#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <conio.h>
#include <fstream>
#include <string>
#include <sstream>

using namespace std;

char getCharAtxy(short int x, short int y);
void gotoxy(int x, int y);
void topheader();
void printPlayer();
void printMaze();
void writemazetofile();
void readmazefromfile();
char maze1[41][124];
// char maze[41][124] = {{},
//                       {},
//                       {},
//                       {'*', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {'*', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {},
//                       {}};

char maze[39][132] = {
"**###############################################################################################################################**",
"**..                                                                                                                             **",
"**..                         %%%%%%%%%%%%%%              ............        %%%%%%%%%%%%%%        |%|              %%%%         **",
"**..                            |%|     |%|               ...........        |%|        |%|        |%|               |%|         **",
"**..                   |%|     |%|                    ...         |%|        |%|        |%|                          |%|         **",
"**..                   %%%%%%%%%%%.. .             |%|...         %%%%%%%%%%%%%%        |%|                         %%%%         **",
"**..                   |%|          ..             |%|...          .............                                                 **",
"**..                   %%%%%%%%%%%%%..      |%|...      %%%%%%%%%%%%%%          %%%% .                                           **",
"**..                             |%|..      |%|...      |%|                                  .........      |%|....|%|.          **",
"**..                             |%|..      |%|...      |%|                                    .......|%|   |%|....|%|.          **",
"**..                    .........|%|.         ..........                                       .......|%|   |%|....|%|.          **",
"**..                             |%|        .                                            .......|%|   |%|..                      **",
"**..                             |%|        .    ........                      ........                                          **",
"**..                             |%|        .    ....                          |%|.....                                          **",
"**..                             |%|             ....                          |%|.....       |%|......|%|...                    **",
"**                               |%|             ....                          |%|.....       |%|......|%|...                    **",
"**..     |%|           ....    |%|.....       |%|......|%|...                                                                    **",
"**..     |%|                                  |%|      |%|..        %%%%%%%%%%%%%             |%|......|%|...                    **",
"**..     |%|                                  |%|      |%|...        .............               ......|%|%%%%%%%                **",
"**..     |%|                                                                                                  |%| ...... |%|     **",
"**..     |%|  %%%%%%%%%%%%%%%%%%                                                                              |%|        |%|     **",
"**..      .................................                                                                                      **",
"**..  ......................................  .......................                                                            **",
"**..     |%|                |%|%%%|%|.                      .......|%|   |%|    ....|%|.                                         **",
"**..     |%|                |%|   |%|.    ................  %%%%%%%%%%                                                           **",
"**..     |%|                |%|   |%|.    ....    |%|.....                                                                       **",
"**..              |%|.. |%|...      |%|                            .......|%|                             |%|   ....|%|.         **",
"**..     .........|%|.    ..........                               .......|%|                             |%|   ....|%|.         **",
"**..               |%| |%|%%%|%|.                                                                               .......|%|       **",
"**..               |%| |%|   |%|.                  ........   ...              .....  %%%%%%%%%%                                 **",
"**..               |%| |%|   |%|.                  ....       |%|              .....                                             **",
"**..               |%|  ......                     ....       |%|              .....       |%|     ......|%|...                  **",
"**                 |%|  ......                     ....       |%|              .....       |%|     ......|%|...                  **",
"**..                   |%|                         ....       |%|              .....       |%|     ......|%|...                  **",
"**..               ...............              ...........   ...              ..........................   ......               **",
"**..               %%%%%%%%%%%%%%                ..........   ..                %%%%%%%%%%%%%%   |%|    %%%%                     **",
"**..                  |%|     |%|                 .........   ..                |%|        |%|   |%|     |%|                     **",
"**..                  |%|     |%|                      ...                      |%|        |%|   |%|     |%|                     **",
"**###############################################################################################################################**"};

int playerX = 50;
int playerY = 27;
int zombie1X = 90;
int zombie1Y = 10;
int zombie2X = 60;
int zombie2Y = 25;
int zombie3X = 8;
int zombie3Y = 3;
string direction = "up";
string direction2 = "right";
string direction3 = "up";
string direction4 = "right";
char previous = ' ';
void erasePlayer();
void movePlayerLeft();
void movePlayerRight();
void movePlayerUp();
void movePlayerDown();
void printZombie();
void erasezombie();
void printZombie2();
void eraseZombie2();
void printZombie3();
void eraseZombie3();
// player bullets
int score = 0;
int playerhealth = 10;
int zombie1health = 5;
int zombie2health = 5;
int zombie3health = 5;
int timer = 3;
int bulletX[100];
int bulletY[100];
bool isBulletActive[100];
int bulletCount = 0;
int bulletLeftX[100];
int bulletLeftY[100];
int bulletLeftCount = 0;
bool isBulletLeftActive[100];
void generateBulletLeft();
void printLeftBullet(int x, int y);
void eraseLeftBullet(int x, int y);
void makeBulletLeftInactive(int index);
void moveBulletLeft();
void generateBullet();
void printBullet(int x, int y);
void eraseBullet(int x, int y);
void makeBulletInactive(int index);
void moveBullet();
void bulletCollisionWithzombie1();
void bulletCollisionWithzombie2();
void bulletCollisionWithzombie3();
void bulletLeftCollisionWithzombie1();
void bulletLeftCollisionWithzombie2();
void bulletLeftCollisionWithzombie3();
void addScore();
void printScore();

main()
{
    HANDLE hStdOut = NULL;
    CONSOLE_CURSOR_INFO curInfo;

    hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    GetConsoleCursorInfo(hStdOut, &curInfo);
    curInfo.bVisible = FALSE;
    SetConsoleCursorInfo(hStdOut, &curInfo);

    int option;
    system("cls");
    topheader();
    cout << endl;
    cout << endl;
    cout << endl;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 12);
    cout << " 1:       Start Game" << endl;
    SetConsoleTextAttribute(hConsole, 12);
    cout << " 2:       Options   " << endl;
    SetConsoleTextAttribute(hConsole, 12);
    cout << " 2:       Resume   " << endl;
    SetConsoleTextAttribute(hConsole, 12);
    cout << " 3:       Exit  " << endl;
    cin >> option;
    if (option == 1)
    {
        system("cls");
        printMaze();
        writemazetofile();
        readmazefromfile();
        gotoxy(playerX, playerY);
        printPlayer();
        gotoxy(zombie1X, zombie1Y);
        printZombie();

        while (true)
        {
            if (direction3 == "up")
            {
                char next = maze[zombie3Y - 1][zombie3X - 3];
                if (next == '*' || next == '%' || next == '|' || next == '#')
                {
                    direction3 = "down";
                }
                else if (next == ' ' || next == '.')
                {
                    eraseZombie3();
                    zombie3Y = zombie3Y - 1;
                    zombie3X = zombie3X - 1;
                    previous = next;
                    printZombie3();
                    Sleep(40);
                }
            }
            if (direction3 == "down")
            {
                char next = maze[zombie3Y + 3][zombie3X + 3];
                if (next == '*' || next == '%' || next == '|')
                {
                    direction3 = "up";
                }
                else if (next == ' ' || next == '.')
                {
                    eraseZombie3();
                    zombie3Y = zombie3Y + 1;
                    zombie3X = zombie3X + 1;
                    previous = next;
                    printZombie3();
                    Sleep(40);
                }
            }
            if (direction == "up")
            {
                char next = maze[zombie1Y - 1][zombie1X];
                if (next == '*' || next == '%' || next == '|')
                {
                    direction = "down";
                }
                else if (next == ' ' || next == '.')
                {
                    erasezombie();
                    zombie1Y = zombie1Y - 1;
                    previous = next;
                    printZombie();
                    Sleep(20);
                }
            }
            if (direction == "down")
            {
                char next = maze[zombie1Y + 3][zombie1X];
                if (next == '*' || next == '%' || next == '|')
                {
                    direction = "up";
                }
                else if (next == ' ' || next == '.')
                {
                    erasezombie();
                    zombie1Y = zombie1Y + 1;
                    previous = next;
                    printZombie();
                    Sleep(20);
                }
            }
            if (direction2 == "left")
            {
                char next = maze[zombie2Y][zombie2X - 1];
                if (next == '*' || next == '%' || next == '|')
                {
                    direction2 = "right";
                }
                else if (next == ' ' || next == '.')
                {
                    eraseZombie2();
                    zombie2X = zombie2X - 1;
                    previous = next;
                    printZombie2();
                }
            }
            if (direction2 == "right")
            {
                char next = maze[zombie2Y][zombie2X + 3];
                if (next == '*' || next == '%' || next == '|')
                {
                    direction2 = "left";
                }
                else if (next == ' ' || next == '.')
                {
                    eraseZombie2();
                    zombie2X = zombie2X + 1;
                    previous = next;
                    printZombie2();
                }
            }
            if (GetAsyncKeyState(VK_LEFT))
            {
                movePlayerLeft();
            }
            if (GetAsyncKeyState(VK_RIGHT))
            {
                movePlayerRight();
            }
            if (GetAsyncKeyState(VK_UP))
            {
                movePlayerUp();
            }
            if (GetAsyncKeyState(VK_DOWN))
            {
                movePlayerDown();
            }
            if (GetAsyncKeyState(VK_SPACE))
            {
                generateBulletLeft();
            }
            if (GetAsyncKeyState(VK_TAB))
            {
                generateBullet();
            }
            if (GetAsyncKeyState(VK_ESCAPE))
            {
                break;
            }
            printScore();
            moveBullet();
            moveBulletLeft();
            bulletCollisionWithzombie1();
            bulletCollisionWithzombie2();
            bulletCollisionWithzombie3();
            bulletLeftCollisionWithzombie1();
            bulletLeftCollisionWithzombie2();
            bulletLeftCollisionWithzombie3();
            timer++;
        }
    }

    if (option == 2)
    {
        system("cls");
        topheader();
        SetConsoleTextAttribute(hConsole, 12);
        cout << " KEYS ";
        cout << " -------------------------------------                      " << endl;
        cout << "  1:             UP                             Go UP     " << endl;
        cout << "  2:             DOWN                           Go DOWN     " << endl;
        cout << "  3:             LEFT                           Go LEFT     " << endl;
        cout << "  4:             RIGHT                          Go RIGHT     " << endl;
        cout << "  5:             SPACE                          FIRE USER     " << endl;
        cout << "  6:             ESC                            END GAME     " << endl;
        cout << "Press any key to continue" << endl;
        getch();
    }
}

void writemazetofile()
{
    fstream file;
    file.open("import1.txt", ios::out);

    for (int i = 0; i < 39; i++)
    {
        for (int j = 0; j < 132; j++)
        {
            file << maze[i][j];
        }
        file << endl;
    }
    file.close();
}

void readmazefromfile()
{
    fstream file;
    string line;
    file.open("import1.txt", ios::in);
    for (int i = 0; i < 39; i++)
    {
        getline(file, line);
        for (int j = 0; j < 132; j++)
        {
            maze[i][j] = line[j];
        }
    }
    file.close();

      for (int i = 0; i < 39; i++)
    {
        for (int j = 0; j < 132; j++)
        {
            cout << maze[i][j];
        }
        cout << endl;
    }

    
}

char getCharAtxy(short int x, short int y)
{
    CHAR_INFO ci;
    COORD xy = {0, 0};
    SMALL_RECT rect = {x, y, x, y};
    COORD coordBufSize;
    coordBufSize.X = 1;
    coordBufSize.Y = 1;
    return ReadConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), &ci, coordBufSize, xy, &rect) ? ci.Char.AsciiChar
                                                                                            : ' ';
}

void gotoxy(int x, int y)
{
    COORD coordinates;
    coordinates.X = x;
    coordinates.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordinates);
}

void printMaze()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 11);
  
}

void printPlayer()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 13);
    int beta = 254;
    int i;

    char tank = beta;

    char b[3] = {tank, ' ', tank};
    char c[3] = {tank, tank, tank};
    char d[3] = {tank, tank, tank};
    
    // char haji[3][3] ={
    //     {}
    // };
    // for (int i = 0; i < 3; i++)
    // {
    //     for (int j = 0; i < 3; j++)
    //     {
    //         cout<<haji[i][j];
    //     }
    //     cout<<endl;
    // }

    // for (i = 0; i < 3; i++)
    // {
    //     gotoxy(playerX + i, playerY);
    //     cout << b[i];
    // }
    // cout << endl;
    // for (i = 0; i < 3; i++)
    // {
    //     gotoxy(playerX + i, playerY + 1);
    //     cout << c[i];
    // }
    // cout << endl;
    // for (i = 0; i < 3; i++)
    // {
    //     gotoxy(playerX + i, playerY + 2);
    //     cout << d[i];
    // }
    for (int j = 0; j < 3; j++)
    {
       gotoxy(playerX + j, playerY);
        cout << b[j];
         gotoxy(playerX + j, playerY + 1);
        cout << c[j];
         gotoxy(playerX + j, playerY + 2);
        cout << d[j];
    }
    
}

void topheader()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 11);
    cout << ".----------------.  .----------------.  .----------------.       .----------------.  .----------------.  .----------------.  .----------------.   " << endl;
    cout << "| .--------------. || .--------------. || .--------------. |     | .--------------. || .--------------. || .--------------. || .--------------. | " << endl;
    cout << "| |  _________   | || |  ____  ____  | || |  _________   | |     | |   _____      | || |      __      | || |    _______   | || |  _________   | | " << endl;
    cout << "| | |  _   _  |  | || | |_   ||   _| | || | |_   ___  |  | |     | |  |_   _|     | || |     /  \\     | || |   /  ___  |  | || | |  _   _  |  | | " << endl;
    cout << "| | |_/ | | \\_|  | || |   | |__| |   | || |   | |_  \\_|  | |     | |    | |       | || |    / /\\ \\    | || |  |  (__ \\_|  | || | |_/ | | \\_|  | | " << endl;
    cout << "| |     | |      | || |   |  __  |   | || |   |  _|  _   | |     | |    | |   _   | || |   / ____ \\   | || |   '.___`-.   | || |     | |      | | " << endl;
    cout << "| |    _| |_     | || |  _| |  | |_  | || |  _| |___/ |  | |     | |   _| |__/ |  | || | _/ /    \\ \\_ | || |  |`\\____) |  | || |    _| |_     | | " << endl;
    cout << "| |   |_____|    | || | |____||____| | || | |_________|  | |     | |  |________|  | || ||____|  |____|| || |  |_______.'  | || |   |_____|    | | " << endl;
    cout << "| |              | || |              | || |              | |     | |              | || |              | || |              | || |              | | " << endl;
    cout << "| '--------------' || '--------------' || '--------------' |     | '--------------' || '--------------' || '--------------' || '--------------' | " << endl;
    cout << " '----------------'  '----------------'  '----------------'       '----------------'  '----------------'  '----------------'  '----------------'  " << endl;

    cout << "                                           .----------------.  .----------------.  .----------------. " << endl;
    cout << "                                          | .--------------. || .--------------. || .--------------. |" << endl;
    cout << "                                          | |  ________    | || |      __      | || |  ____  ____  | |" << endl;
    cout << "                                          | | |_   ___ `.  | || |     /  \\     | || | |_  _||_  _| | |" << endl;
    cout << "                                          | |   | |   `. \\ | || |    / /\\ \\    | || |   \\ \\  / /   | |" << endl;
    cout << "                                          | |   | |    | | | || |   / ____ \\   | || |    \\ \\/ /    | |" << endl;
    cout << "                                          | |  _| |___.' / | || | _/ /    \\ \\_ | || |    _|  |_    | |" << endl;
    cout << "                                          | | |________.'  | || ||____|  |____|| || |   |______|   | |" << endl;
    cout << "                                          | |              | || |              | || |              | |" << endl;
    cout << "                                          | '--------------' || '--------------' || '--------------' |" << endl;
    cout << "                                           '----------------'  '----------------'  '----------------' " << endl;

    cout << " .----------------.  .-----------------.     .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  " << endl;
    cout << "| .--------------. || .--------------. |    | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | " << endl;
    cout << "| |     ____     | || | ____  _____  | |    | |  _________   | || |      __      | || |  _______     | || |  _________   | || |  ____  ____  | | " << endl;
    cout << "| |   .'    `.   | || ||_   \\|_   _| | |    | | |_   ___  |  | || |     /  \\     | || | |_   __ \\    | || | |  _   _  |  | || | |_   ||   _| | | " << endl;
    cout << "| |  /  .--.  \\  | || |  |   \\ | |   | |    | |   | |_  \\_|  | || |    / /\\ \\    | || |   | |__) |   | || | |_/ | | \\_|  | || |   | |__| |   | | " << endl;
    cout << "| |  | |    | |  | || |  | |\\ \\| |   | |    | |   |  _|  _   | || |   / ____ \\   | || |   |  __ /    | || |     | |      | || |   |  __  |   | | " << endl;
    cout << "| |  \\  `--'  /  | || | _| |_\\   |_  | |    | |  _| |___/ |  | || | _/ /    \\ \\_ | || |  _| |  \\ \\_  | || |    _| |_     | || |  _| |  | |_  | | " << endl;
    cout << "| |   `.____.'   | || ||_____|\\____| | |    | | |_________|  | || ||____|  |____|| || | |____| |___| | || |   |_____|    | || | |____||____| | | " << endl;
    cout << "| |              | || |              | |    | |              | || |              | || |              | || |              | || |              | | " << endl;
    cout << "| '--------------' || '--------------' |    | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | " << endl;
    cout << " '----------------'  '----------------'      '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  " << endl;
}

void erasePlayer()
{
    int i;
    for (i = 0; i < 3; i++)
    {
        gotoxy(playerX + i, playerY);
        cout << ' ';
    }
    cout << endl;
    for (i = 0; i < 3; i++)
    {
        gotoxy(playerX + i, playerY + 1);
        cout << ' ';
    }
    cout << endl;
    for (i = 0; i < 3; i++)
    {
        gotoxy(playerX + i, playerY + 2);
        cout << ' ';
    }
}

void movePlayerLeft()
{

    char next = maze[playerY][playerX - 1];
    char next1 = maze[playerY + 1][playerX - 1];
    char next2 = maze[playerY + 2][playerX - 1];
    if ((next == ' ' || next == '.') && (next1 == '.' || next1 == ' ') && (next2 == '.' || next2 == ' '))
    {
        erasePlayer();
        playerX--;
        printPlayer();
    }
    if ((next == '.') || (next1 == '.') || (next2 == '.'))
    {
        score = score + 5;
    }
}

void movePlayerRight()
{
    char next = maze[playerY][playerX + 3];
    char next1 = maze[playerY + 1][playerX + 3];
    char next2 = maze[playerY + 2][playerX + 3];
    if ((next == ' ' || next == '.') && (next1 == '.' || next1 == ' ') && (next2 == '.' || next2 == ' '))
    {
        erasePlayer();
        playerX++;
        printPlayer();
    }
    if ((next == '.') || (next1 == '.') || (next2 == '.'))
    {
        score = score + 5;
    }
}

void movePlayerUp()
{
    int b = 31;
    char down = b;
    char next = maze[playerY - 1][playerX];
    char next1 = maze[playerY - 1][playerX + 1];
    char next2 = maze[playerY - 1][playerX + 2];
    if ((next == ' ' || next == '.') && (next1 == '.' || next1 == ' ') && (next2 == '.' || next2 == ' '))
    {
        erasePlayer();
        playerY--;
        printPlayer();
    }
    if ((next == '.') || (next1 == '.') || (next2 == '.'))
    {
        score = score + 5;
        playerhealth--;
    }
}

void movePlayerDown()
{
    char next = maze[playerY + 3][playerX];
    char next1 = maze[playerY + 3][playerX + 1];
    char next2 = maze[playerY + 3][playerX + 2];

    if ((next == ' ' || next == '.') && (next1 == '.' || next1 == ' ') && (next2 == '.' || next2 == ' '))
    {
        erasePlayer();
        playerY++;
        printPlayer();
    }
    if ((next == '.') || (next1 == '.') || (next2 == '.'))
    {
        score = score + 5;
    }
}

void printZombie()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 11);
    int a = 30;
    int b = 31;
    int c = 475;
    char up = a;
    char down = b;
    char block = c;
    if (zombie1health != 0)
    {
        for (int i = 0; i < 1; i++)
        {
            gotoxy(zombie1X, zombie1Y);
            cout << up << endl;
            gotoxy(zombie1X, zombie1Y + 1);
            cout << block << endl;
            gotoxy(zombie1X, zombie1Y + 2);
            cout << down << endl;
        }
    }
}

void erasezombie()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 11);
    int a = 30;
    int b = 31;
    int c = 475;
    char up = a;
    char down = b;
    char block = c;
    for (int i = 0; i < 1; i++)
    {
        gotoxy(zombie1X, zombie1Y);
        cout << ' ' << endl;
        gotoxy(zombie1X, zombie1Y + 1);
        cout << ' ' << endl;
        gotoxy(zombie1X, zombie1Y + 2);
        cout << ' ' << endl;
    }
}

void printZombie2()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 11);
    int a = 273;
    int c = 272;

    char left = a;
    char right = c;
    if (zombie2health != 0)
    {
        for (int i = 0; i < 1; i++)
        {
            gotoxy(zombie2X, zombie2Y);
            cout << left;
            gotoxy(zombie2X + 1, zombie2Y);
            cout << left;
            gotoxy(zombie2X + 2, zombie2Y);
            cout << right;
            gotoxy(zombie2X + 3, zombie2Y);
            cout << right;
        }
    }
}

void eraseZombie2()
{

    int a = 273;
    int c = 272;

    char left = a;
    char right = c;

    for (int i = 0; i < 1; i++)
    {
        gotoxy(zombie2X, zombie2Y);
        cout << ' ';
        gotoxy(zombie2X + 1, zombie2Y);
        cout << ' ';
        gotoxy(zombie2X + 2, zombie2Y);
        cout << ' ';
        gotoxy(zombie2X + 3, zombie2Y);
        cout << ' ';
    }
}

void printZombie3()
{
    int a = 286;
    int b = 254;
    int c = 273;
    int d = 272;
    int e = 287;

    char up = a;
    char box = b;
    char left = c;
    char right = d;
    char down = e;
    if (zombie3health != 0)
    {

        for (int i = 0; i < 1; i++)
        {
            gotoxy(zombie3X + 2, zombie3Y);
            cout << up;
            gotoxy(zombie3X, zombie3Y + 1);
            cout << left;
            gotoxy(zombie3X + 2, zombie3Y + 1);
            cout << box;
            gotoxy(zombie3X + 4, zombie3Y + 1);
            cout << right;
            gotoxy(zombie3X + 2, zombie3Y + 2);
            cout << down;
            // gotoxy(zombie3X + 2, zombie3Y + 2);
            // string zombie3[3][3] = {{" ", "up"," "},
            //                   {"left", "box", "right"},
            //                   {" ", "down"," "}};
        }
    }
}

void eraseZombie3()
{
    int a = 286;
    int b = 254;
    int c = 273;
    int d = 272;
    int e = 287;

    char up = a;
    char box = b;
    char left = c;
    char right = d;
    char down = e;
    for (int i = 0; i < 1; i++)
    {
        gotoxy(zombie3X + 2, zombie3Y);
        cout << ' ';
        gotoxy(zombie3X, zombie3Y + 1);
        cout << ' ';
        gotoxy(zombie3X + 2, zombie3Y + 1);
        cout << ' ';
        gotoxy(zombie3X + 4, zombie3Y + 1);
        cout << ' ';
        gotoxy(zombie3X + 2, zombie3Y + 2);
        cout << ' ';
    }
}
void generateBullet()
{
    bulletX[bulletCount] = playerX + 4;
    bulletY[bulletCount] = playerY;
    isBulletActive[bulletCount] = true;
    gotoxy(playerX + 4, playerY);
    cout << "-";
    bulletCount++;
}
void generateBulletLeft()
{
    bulletLeftX[bulletLeftCount] = playerX - 2;
    bulletLeftY[bulletLeftCount] = playerY;
    isBulletLeftActive[bulletLeftCount] = true;
    gotoxy(playerX - 2, playerY);
    cout << "-";
    bulletLeftCount++;
}
void makeBulletLeftInactive(int index)
{
    isBulletLeftActive[index] = false;
}

void moveBulletLeft()
{
    for (int x = 0; x < bulletLeftCount; x++)
    {
        char next = getCharAtxy(bulletLeftX[x] - 1, bulletLeftY[x]);
        if (next != ' ')
        {
            eraseLeftBullet(bulletLeftX[x], bulletLeftY[x]);
            makeBulletLeftInactive(x);
        }
        else
        {
            eraseLeftBullet(bulletLeftX[x], bulletLeftY[x]);
            bulletLeftX[x] = bulletLeftX[x] - 1;
            printLeftBullet(bulletLeftX[x], bulletLeftY[x]);
        }
    }
}
void printLeftBullet(int x, int y)
{
    gotoxy(x, y);
    cout << "-";
}
void eraseLeftBullet(int x, int y)
{
    gotoxy(x, y);
    cout << " ";
}


void printBullet(int x, int y)
{
    gotoxy(x, y);
    cout << "-";
}
void eraseBullet(int x, int y)
{
    gotoxy(x, y);
    cout << " ";
}
void makeBulletInactive(int index)
{
    isBulletActive[index] = false;
}
void moveBullet()
{
    for (int x = 0; x < bulletCount; x++)
    {
        char next = getCharAtxy(bulletX[x] + 1, bulletY[x]);
        if (next != ' ')
        {
            eraseBullet(bulletX[x], bulletY[x]);
            makeBulletInactive(x);
        }
        else
        {
            eraseBullet(bulletX[x], bulletY[x]);
            bulletX[x] = bulletX[x] + 1;
            printBullet(bulletX[x], bulletY[x]);
        }
    }
}
cout<<"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
void bulletCollisionWithzombie1()
{
    for (int x = 0; x < bulletCount; x++)
    {
        if (isBulletActive[x] == true)
        {
            if (bulletX[x] - 1 == zombie1X && (bulletY[x] == zombie1Y || bulletY[x] == zombie1Y + 2 || bulletY[x] == zombie1Y + 3))
            {
                addScore();
                zombie1health--;
                if (zombie1health < 0)
                {
                    zombie1health = 0;
                    if (zombie1health == 0)
                    {
                        erasezombie();
                    }
                }
            }
            if (zombie1X - 1 == bulletX[x] && zombie1Y + 1 == bulletY[x])
            {
                addScore();
                zombie1health--;
                if (zombie1health < 0)
                {
                    zombie1health = 0;
                    if (zombie1health == 0)
                    {
                        erasezombie();
                    }
                }
            }
        }
    }
}

void bulletLeftCollisionWithzombie1()
{
    for (int x = 0; x < bulletLeftCount; x++)
    {
        if (isBulletLeftActive[x] == true)
        {
            if (bulletLeftX[x] + 1 == zombie1X && (bulletLeftY[x] == zombie1Y || bulletLeftY[x] == zombie1Y + 2 || bulletLeftY[x] == zombie1Y + 3))
            {
                addScore();
                zombie1health--;
                if (zombie1health < 0)
                {
                    zombie1health = 0;
                    if (zombie1health == 0)
                    {
                        erasezombie();
                    }
                }
            }
            if (zombie1X - 1 == bulletLeftX[x] && zombie1Y + 1 == bulletLeftY[x])
            {
                addScore();
                zombie1health--;
                if (zombie1health < 0)
                {
                    zombie1health = 0;
                    if (zombie1health == 0)
                    {
                        erasezombie();
                    }
                }
            }
        }
    }
}

void bulletCollisionWithzombie2()
{
    for (int x = 0; x < bulletCount; x++)
    {
        if (isBulletActive[x] == true)
        {
            if (bulletX[x] + 1 == zombie2X && (bulletY[x] == zombie2Y))
            {
                addScore();
                zombie2health--;
                if (zombie2health < 0)
                {
                    zombie2health = 0;
                    if (zombie2health == 0)
                    {
                        eraseZombie2();
                    }
                }
            }
            if (zombie2X + 1 == bulletX[x] && zombie2Y - 1 == bulletY[x])
            {
                addScore();
                zombie2health--;
                if (zombie2health < 0)
                {
                    zombie2health = 0;
                    if (zombie2health == 0)
                    {
                        eraseZombie2();
                    }
                }
            }
        }
    }
}
void bulletLeftCollisionWithzombie2()
{
    for (int x = 0; x < bulletLeftCount; x++)
    {
        if (isBulletLeftActive[x] == true)
        {
            if (bulletLeftX[x] - 1 == zombie2X && (bulletLeftY[x] == zombie2Y))
            {
                addScore();
                zombie2health--;
                if (zombie2health < 0)
                {
                    zombie2health = 0;
                    if (zombie2health == 0)
                    {
                        eraseZombie2();
                    }
                }
            }
            if (zombie2X + 1 == bulletLeftX[x] && zombie2Y - 1 == bulletLeftY[x])
            {
                addScore();
                zombie2health--;
                if (zombie2health < 0)
                {
                    zombie2health = 0;
                    if (zombie2health == 0)
                    {
                        eraseZombie2();
                    }
                }
            }
        }
    }
}
void bulletCollisionWithzombie3()
{
    for (int x = 0; x < bulletCount; x++)
    {
        if (isBulletActive[x] == true)
        {
            if (bulletX[x] + 1 == zombie3X && (bulletY[x] == zombie3Y ))
            {
                addScore();
                zombie3health--;
                if (zombie3health < 0)
                {
                    zombie3health = 0;
                    if (zombie3health == 0)
                    {
                        eraseZombie3();
                    }
                }
            }
            if (zombie3X - 1 == bulletX[x] && zombie3Y + 1 == bulletY[x])
            {
                addScore();
                zombie3health--;

                if (zombie3health < 0)
                {
                    zombie3health = 0;
                    if (zombie3health == 0)
                    {
                        eraseZombie3();
                    }
                }
            }
        }
    }
}
void bulletLeftCollisionWithzombie3()
{
    for (int x = 0; x < bulletLeftCount; x++)
    {
        if (isBulletLeftActive[x] == true)
        {
            if (bulletLeftX[x] - 1 == zombie3X && (bulletLeftY[x] == zombie3Y || bulletLeftY[x] == zombie3Y + 2 || bulletLeftY[x] == zombie3Y + 3))
            {
                addScore();
                zombie3health--;
                if (zombie3health < 0)
                {
                    zombie3health = 0;
                    if (zombie3health == 0)
                    {
                        eraseZombie3();
                    }
                }
            }
            if (zombie3X - 1 == bulletLeftX[x] && zombie3Y + 1 == bulletLeftY[x])
            {
                addScore();
                zombie3health--;

                if (zombie3health < 0)
                {
                    zombie3health = 0;
                    if (zombie3health == 0)
                    {
                        eraseZombie3();
                    }
                }
            }
        }
    }
}

// void PlayerCollisionWithZombie1()
// {
//     int a = 30;
//     int b = 31;
//     int c = 475;
//     char up = a;
//     char down = b;
//     char block = c;

// }

void addScore()
{
    score++;
}
void printScore()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 6);
    gotoxy(135, 10);
    cout << "******************************" << endl;
    gotoxy(135, 11);
    cout << "*     Score:  " << score << endl;
    gotoxy(135, 12);
    cout << "zombie 1 health: " << zombie1health << endl;
    gotoxy(135, 13);
    cout << "zombie 2 health: " << zombie2health << endl;
    gotoxy(135, 14);
    cout << "zombie 3 health: " << zombie3health << endl;
    gotoxy(135, 15);
    cout << "*    Player Health:  " << playerhealth << endl;
    gotoxy(135, 16);
    cout << "******************************" << endl;
    gotoxy(135, 21);
    cout << " Control";
    gotoxy(135, 22);
    cout << "-----------";
    gotoxy(135, 23);
    cout << " Up        Key    -   Go Up";
    gotoxy(135, 24);
    cout << " Down      Key    -   Go Down";
    gotoxy(135, 25);
    cout << " Left      Key    -   Go Left";
    gotoxy(135, 26);
    cout << " Right     Key    -   Go Right";
    gotoxy(135, 27);
    cout << " Escape    Key    -   Exit";
}
